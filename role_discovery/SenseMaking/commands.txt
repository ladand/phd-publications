In shell:

javac HuffmanComparator.java

to make the java class for Huffman coding. Then, still in shell:


./make_adjacency.py input/netsci-G.csv input/netsci-V.csv >! output/test-A.csv
./eccentricity.py input/netsci-G.csv input/netsci-V.csv >! output/test-M.csv


This generates a 1-indexed version of the graph file (test-A.csv) so
Matlab can read it. The order of nodes is the same as in the V file
(netsci-V.csv). It also generates an example "property" file
(test-M.csv), which in this case has just two properties: eccentricity
and the number of biconnected components. Again, the order is the same
as in the V file. This can be omitted if you just want the properties
I calculate in matlab (degrees, pagerank, clustering).

In matlab:

javaaddpath('.');
V = dlmread('input/netsci-V.csv',',',1,1);
A = spconvert(dlmread('output/test-A.csv'));
[M, E, N, Q, E_names, Q_names, err] = MakeSense(A,V,'output/test-M.csv');
WriteRoleProperties(E, E_Names)
WriteRoleProperties(M, E, E_names, 'output/test-E-analysis.csv');
WriteRoleProperties(N, Q, Q_names, 'output/test-Q-analysis.csv');
WriteRoleProperties([M N], [E Q], [E_names Q_names], ...
		    'output/test-EQ-analysis.csv');


The first two commands just read feature matrix V (input to our
program) and adjacency matrix A from the file we generated in
python. 

The third line calls the main sensemaking code, which (1)
computes topological properties M and, if necessary, reads in the
external properties we generated in python, adding these to M. It also
computes N, the neighborhood matrix (node x role, tells the percentage
of node i's neighborhood that is role j). It computes F and G using
our MDL version of RolX, and then computes E s.t. GE=M using fixed G
NMF, and Q s.t. GQ=N, using fixed G NMF. It also returns cell arrays
with names for each column of E and Q, and an n-by-3 array err which
has the "anomaly score" of each node based on (1) GF=V reconstruction
error, (2) GE=M reconstruction error, (3) GQ=N reconstruction error.

The last three lines show how to write the results to a csv file so
you can load it in excel or whatever. If you call it with M, E, and
E_names, it will have one row per role (plus one default row), and one
column per column of M. The value at Role i and Property j is the
ratio of E(i,j) to E_1(i,j), where E_1 is the matrix we get if we try
to fit G_1*E_1=M, where G_1 is a n-by-1 matrix (only one role). So all
the defaults are 1.0. You can do the same with N, Q, and Q_names, or
just concatenate everything to get one file with all of it.
